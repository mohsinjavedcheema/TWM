<Window x:Class="Twm.Windows.Strategies.ValidatorWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:validator="clr-namespace:Twm.ViewModels.Strategies.Validator"
        xmlns:extensions="clr-namespace:Twm.Extensions"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        xmlns:controls="clr-namespace:Twm.Controls"
        xmlns:performance="clr-namespace:Twm.Views.Strategies.Performance"
        xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:classes="clr-namespace:Twm.Classes"
        mc:Ignorable="d"
        Icon="/Assets/favicon.ico"
        WindowStartupLocation="CenterScreen"
        Title="Validator" Height="600" Width="1000">
    <Grid>
        <Grid.Resources>

            <Style x:Key="TreeViewItemFocusVisual">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Rectangle />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z" />

            <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="Focusable" Value="False" />
                <Setter Property="Width" Value="16" />
                <Setter Property="Height" Value="16" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border Width="16" Height="16" Background="Transparent" Padding="5,5,5,5">
                                <Path x:Name="ExpandPath" Fill="Transparent" Stroke="#FF989898"
                                      Data="{StaticResource TreeArrow}">
                                    <Path.RenderTransform>
                                        <RotateTransform Angle="135" CenterX="3" CenterY="3" />
                                    </Path.RenderTransform>
                                </Path>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Stroke" TargetName="ExpandPath" Value="Black" />
                                    <Setter Property="Fill" TargetName="ExpandPath" Value="Transparent" />
                                </Trigger>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter Property="RenderTransform" TargetName="ExpandPath">
                                        <Setter.Value>
                                            <RotateTransform Angle="180" CenterX="3" CenterY="3" />
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="Fill" TargetName="ExpandPath" Value="#FF595959" />
                                    <Setter Property="Stroke" TargetName="ExpandPath" Value="#FF262626" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>


            <Style x:Key="TreeViewItemStyle1" TargetType="{x:Type TreeViewItem}">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="HorizontalContentAlignment"
                        Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
                <Setter Property="VerticalContentAlignment"
                        Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
                <Setter Property="Padding" Value="0,0,0,0" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TreeViewItem}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MinWidth="19" Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition />
                                </Grid.RowDefinitions>
                                <!-- created ItemRowGrid to contain both togglebutton and border -->
                                <Grid x:Name="ItemRowGrid" Grid.ColumnSpan="3" Margin="1.5,0,0,0">
                                    <ToggleButton x:Name="Expander" ClickMode="Press"
                                                  IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                                  Style="{StaticResource ExpandCollapseToggleStyle}"
                                                  HorizontalAlignment="Left"
                                                  d:LayoutOverrides="Width, LeftMargin, RightMargin" />
                                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            Background="{TemplateBinding Background}" Grid.Column="0"
                                            Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true"
                                            Margin="17.5,0,-17.5,0">
                                        <ContentPresenter x:Name="PART_Header" ContentSource="Header"
                                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </Border>
                                </Grid>
                                <ItemsPresenter x:Name="ItemsHost" Grid.ColumnSpan="2" Grid.Column="1" Grid.Row="1" />
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsExpanded" Value="false">
                                    <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed" />
                                </Trigger>
                                <Trigger Property="HasItems" Value="false">
                                    <Setter Property="Visibility" TargetName="Expander" Value="Hidden" />
                                </Trigger>
                                <Trigger Property="IsSelected" Value="true">
                                    <Setter Property="Foreground"
                                            Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                                    <!-- setting highlight target to created ItemRowGrid instead of border -->
                                    <Setter Property="Background" TargetName="ItemRowGrid"
                                            Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                                </Trigger>
                                <!--<MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="true"/>
                                        <Condition Property="IsSelectionActive" Value="false"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}"/>
                                </MultiTrigger>-->
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground"
                                            Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Grid.Resources>


        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>

        <Grid x:Name="leftHelperGrid" Background="Aqua" Grid.Column="0" Grid.Row="0" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
            <Button x:Name="leftButtonGrid" Grid.Column="0" Grid.Row="0" VerticalAlignment="Stretch" HorizontalAlignment="Stretch"  HorizontalContentAlignment="Stretch" />
        </Grid>


        <Expander  Grid.Column="0" Grid.Row="0"  Margin="0,0" HorizontalAlignment="Left" Width="{Binding ElementName=leftHelperGrid, Path=ActualWidth, Mode=OneWay}" Name="expanderLeft"
                  Background="LightGray" Expanded="ExpanderLeft_OnExpanded" Collapsed="ExpanderLeft_OnCollapsed"
                  IsExpanded="True" BorderBrush="DimGray" BorderThickness="0,1,1,1" ExpandDirection="Right">

            <b:Interaction.Behaviors>
                <classes:GridColumnWidthReseterBehaviour TargetGridColumnIndex="0"></classes:GridColumnWidthReseterBehaviour>
            </b:Interaction.Behaviors>

            
            <Grid Margin="1">

                <Grid.RowDefinitions>
                    <RowDefinition Height="*" />
                    <RowDefinition Height="50" />
                </Grid.RowDefinitions>

                <TreeView x:Name="availableObjectsView" Grid.Column="0" ItemsSource="{Binding InstrumentLists}"
                          BorderThickness="1,0,0,0" BorderBrush="DarkGray"
                          SelectedItemChanged="AvailableObjectsView_OnSelectedItemChanged">

                    <TreeView.Resources>
                        <HierarchicalDataTemplate DataType="{x:Type validator:ValidatorItemViewModel }"
                                                  ItemsSource="{Binding Items}">
                            <Grid HorizontalAlignment="Stretch" Margin="0,1" Width="250">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="0" />
                                    <ColumnDefinition Width="25" />
                                    <ColumnDefinition Width="1*" />
                                </Grid.ColumnDefinitions>
                                <Image x:Name="image" Margin="5,2,5,0" Grid.Column="1">
                                    <Image.Style>
                                        <Style TargetType="Image">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Path=IsValid}" Value="False">
                                                    <Setter Property="Source"
                                                            Value="/Twm;component/Images/Invalid.png" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Path=IsValid}" Value="True">
                                                    <Setter Property="Source"
                                                            Value="/Twm;component/Images/Valid.png" />
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Image.Style>
                                </Image>
                                <Grid Grid.Column="2">

                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="1*" />
                                        <ColumnDefinition Width="50" />
                                    </Grid.ColumnDefinitions>

                                    <TextBlock VerticalAlignment="Center" FontSize="16" HorizontalAlignment="Stretch"
                                               Foreground="Black"
                                               Text="{Binding Path=DisplayName}">
                                        <TextBlock.InputBindings>
                                            <MouseBinding Gesture="LeftDoubleClick"
                                                          Command="{Binding Path=DataContext.EditCommand, RelativeSource={RelativeSource AncestorType={x:Type TreeView}}}" />
                                        </TextBlock.InputBindings>
                                    </TextBlock>
                                    <CheckBox IsChecked="{Binding ApplyToAllInstruments}" VerticalAlignment="Center"
                                              Margin="10,1,0,0"
                                              Grid.Column="1"
                                              ToolTip="Apply to all instruments" ToolTipService.InitialShowDelay="1000">
                                        <CheckBox.Style>
                                            <Style TargetType="CheckBox">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Path=IsPortfolio}" Value="True">
                                                        <Setter Property="Visibility" Value="Visible" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding Path=IsPortfolio}" Value="False">
                                                        <Setter Property="Visibility" Value="Collapsed" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </CheckBox.Style>
                                    </CheckBox>
                                </Grid>

                            </Grid>
                        </HierarchicalDataTemplate>
                    </TreeView.Resources>


                    <TreeView.ContextMenu>
                        <ContextMenu>
                            <MenuItem Header="Add instrument list" Command="{Binding AddInstrumentListCommand}" />
                            <MenuItem Header="Add instrument" Command="{Binding AddInstrumentCommand}"
                                      IsEnabled="{Binding IsAddInstrumentEnable}" />
                            <MenuItem Header="Edit" Command="{Binding EditCommand}" IsEnabled="{Binding IsEditEnable}" />
                            <MenuItem Header="Remove" Command="{Binding RemoveCommand}"
                                      IsEnabled="{Binding IsRemoveEnable}" />
                            <Separator />
                            <MenuItem Header="Run" Command="{Binding RunCommand}" IsEnabled="{Binding IsRunEnable}" />
                            <Separator />
                            <MenuItem Header="Presets">
                                <MenuItem Header="Load" Command="{Binding ValidatorInstrumentListPresetsLoadCommand}" />
                                <MenuItem Header="Save" Command="{Binding ValidatorInstrumentListPresetsSaveCommand}" IsEnabled="{Binding IsPresetSaveEnable}" />
                                <MenuItem Header="Export" Command="{Binding ValidatorInstrumentListPresetsExportCommand}" />
                            </MenuItem>
                        </ContextMenu>
                    </TreeView.ContextMenu>


                 

                    <TreeView.ItemContainerStyle>
                        <Style TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource TreeViewItemStyle1}">
                            <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
                            <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
                            <Setter Property="FontWeight" Value="Normal" />
                            <Style.Resources>
                                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="LightGray" />
                            </Style.Resources>
                            <Style.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="FontWeight" Value="Normal" />
                                    <Setter Property="Foreground" Value="Black" />
                                </Trigger>


                            </Style.Triggers>
                        </Style>
                    </TreeView.ItemContainerStyle>
                </TreeView>

                <Border Grid.Row="1" Background="#FFDFDFDF" BorderThickness="1,0,0,0" BorderBrush="DarkGray">
                    <Button Grid.Row="1" Margin="10,0" Content="Run" Width="100" Height="30"
                            HorizontalAlignment="Right" Command="{Binding RunCommand}"
                            IsEnabled="{Binding IsRunEnable}" />
                </Border>
            </Grid>
        </Expander>

        <GridSplitter Grid.Column="1"
                      Width="5"
                      ResizeBehavior="PreviousAndNext"
                      Name="leftSplitter"
                      ResizeDirection="Columns"
                      VerticalAlignment="Stretch"
                      Height="Auto" />


        <Grid x:Name="gContent" Visibility="{Binding PerformanceVisibility}" Grid.Column="2">
            <performance:StrategyPerformanceView DataContext="{Binding SelectedValidatorItem.Performance}"
                                                 HorizontalAlignment="Stretch" />
        </Grid>

        <GridSplitter Grid.Column="3"
                      Width="5"
                      ResizeBehavior="PreviousAndNext"
                      Name="rightSplitter"
                      ResizeDirection="Auto"
                      VerticalAlignment="Stretch"
                      Height="Auto" />


        <Grid x:Name="rightHelperGrid"  Background="Aqua" Grid.Column="4" Grid.Row="0" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
            <Button x:Name="rightButtonGrid" Grid.Column="0" Grid.Row="0" VerticalAlignment="Stretch" HorizontalAlignment="Stretch"  HorizontalContentAlignment="Stretch" />
        </Grid>



        <Expander Margin="0,0" HorizontalAlignment="Right" Width="{Binding ElementName=rightHelperGrid, Path=ActualWidth, Mode=OneWay}"  Name="expanderRight"
                  Grid.Column="4" Background="LightGray"
                  Expanded="ExpanderRight_OnExpanded" Collapsed="ExpanderRight_OnCollapsed"
                  IsExpanded="True" BorderBrush="DimGray" BorderThickness="1,1,0,1" ExpandDirection="Left">

            <b:Interaction.Behaviors>
                <classes:GridColumnWidthReseterBehaviour TargetGridColumnIndex="4"></classes:GridColumnWidthReseterBehaviour>
            </b:Interaction.Behaviors>

            <Grid Margin="1" IsEnabled="{Binding IsStrategySelectEnable}">

                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="3*" />
                    <ColumnDefinition Width="10" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="30" />
                    <RowDefinition Height="*" />

                </Grid.RowDefinitions>


                <!--Instrument-->
                <Border Grid.Column="0" Grid.ColumnSpan="3" Background="White" BorderThickness="0,0,1,0"
                        BorderBrush="DarkGray" />
                <Label Grid.Row="0" Grid.Column="0" Content="Strategy:" VerticalContentAlignment="Center" />

                <Border Grid.Row="0" Grid.Column="1" BorderThickness="1" BorderBrush="LightGray" Height="25"
                        Margin="0,2,0,0">
                    <Label
                        Content="{Binding Path=StrategyName, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                        Height="25"
                        VerticalAlignment="Center"
                        ContextMenuService.IsEnabled="false"
                        ToolTipService.InitialShowDelay="1000"
                        ContextMenuService.Placement="Bottom" />

                </Border>

                <StackPanel Grid.Row="0" Grid.Column="1" Orientation="Horizontal" HorizontalAlignment="Right">
                    <Button  Height="25" Width="25" HorizontalAlignment="Right" Content="..."
                        IsEnabled="{Binding IsStrategyEnable}"
                        Command="{Binding SelectStrategyCommand}" />
                    <Button  Height="25" Width="25" HorizontalAlignment="Right"
                             IsEnabled="{Binding IsStrategyEnable}"
                             Command="{Binding ClearStrategyCommand}" >
                        <Path x:Name="CloseWindow" SnapsToDevicePixels="True" Width="10" Height="10" Margin="0,0,0,0" HorizontalAlignment="Right" VerticalAlignment="Center" Stretch="Fill" Fill="#2D2D2D" Data="F1 M 26.9166,22.1667L 37.9999,33.25L 49.0832,22.1668L 53.8332,26.9168L 42.7499,38L 53.8332,49.0834L 49.0833,53.8334L 37.9999,42.75L 26.9166,53.8334L 22.1666,49.0833L 33.25,38L 22.1667,26.9167L 26.9166,22.1667 Z " />
                    </Button>
                </StackPanel>

                        <xctk:PropertyGrid x:Name="propertyGrid" Grid.Column="0" Grid.ColumnSpan="3" Grid.Row="1"
                                   FontSize="14" IsCategorized="True"
                                   ShowSearchBox="False" ShowTitle="False" ShowSortOptions="False"
                                   AutoGenerateProperties="True"
                                ShowAdvancedOptions="False"
                                   PropertyValueChanged="PropertyGrid_OnPropertyValueChanged"
                                   extensions:PropertyGridExt.PropsVisibility="Validator"
                                   SelectedObject="{Binding SelectedValidatorItem.Strategy}">

                    <xctk:PropertyGrid.AdvancedOptionsMenu>
                        <ContextMenu>
                            <MenuItem Header="Presets">
                                <MenuItem Header="Load" Click="LoadOnClick" />
                                <MenuItem Header="Save" Click="SaveOnClick" />
                                <MenuItem Header="Export" Click="ExportOnClick" />
                            </MenuItem>
                        </ContextMenu>
                    </xctk:PropertyGrid.AdvancedOptionsMenu>


                    <b:Interaction.Behaviors>
                        <extensions:PropsVisibilityBehavior />
                    </b:Interaction.Behaviors>

                    <xctk:PropertyGrid.ContextMenu>
                        <ContextMenu>
                            <MenuItem Header="Presets">
                                <MenuItem Header="Load" Command="{Binding ValidatorStrategyPresetsLoadCommand}" />
                                <MenuItem Header="Save" Command="{Binding ValidatorStrategyPresetsSaveCommand}"
                                          IsEnabled="{Binding IsValidatorStrategyPresetSaveEnable}" />
                                <MenuItem Header="Export" Command="{Binding ValidatorStrategyPresetsExportCommand}" />
                            </MenuItem>
                        </ContextMenu>
                    </xctk:PropertyGrid.ContextMenu>

                    <xctk:PropertyGrid.EditorDefinitions>
                        <xctk:EditorTemplateDefinition TargetProperties="MoneyManagementTypes">
                            <xctk:EditorTemplateDefinition.EditingTemplate>
                                <DataTemplate>
                                    <ComboBox ItemsSource="{Binding Instance.MoneyManagementTypes}"
                                              SelectedValue="{Binding Instance.MoneyManagementType}" />
                                </DataTemplate>
                            </xctk:EditorTemplateDefinition.EditingTemplate>
                        </xctk:EditorTemplateDefinition>
                    
                        <xctk:EditorTemplateDefinition TargetProperties="CommissionTypes">
                            <xctk:EditorTemplateDefinition.EditingTemplate>
                                <DataTemplate>
                                    <ComboBox ItemsSource="{Binding Instance.CommissionTypes}"
                                              SelectedValue="{Binding Instance.CommissionType}" />
                                </DataTemplate>
                            </xctk:EditorTemplateDefinition.EditingTemplate>
                        </xctk:EditorTemplateDefinition>
                    </xctk:PropertyGrid.EditorDefinitions>

                </xctk:PropertyGrid>


            </Grid>
        </Expander>

        <controls:LoadingPanel x:Name="loadingPanel" Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="55"
                               IsLoading="{Binding IsBusy, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                               Message="{Binding Message}"
                               SubMessage="{Binding SubMessage}" />
    </Grid>
</Window>