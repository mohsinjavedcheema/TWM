<Window x:Class="Twm.Windows.Strategies.OptimizerWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        xmlns:controls="clr-namespace:Twm.Controls"
        xmlns:optimizer="clr-namespace:Twm.ViewModels.Strategies.Optimizer"
        xmlns:optimizerViews="clr-namespace:Twm.Views.Strategies.Optimizer"
        xmlns:extensions="clr-namespace:Twm.Extensions"
        xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:converters="clr-namespace:Twm.Chart.Converters;assembly=Twm.Chart"
        xmlns:classes="clr-namespace:Twm.Classes"
        mc:Ignorable="d"
        Icon="/Assets/favicon.ico"
        WindowStartupLocation="CenterScreen"
        Name="window"
        Title="Optimizer" Height="600" Width="1000">
    <Grid Name="grid">
        <Grid.Resources>
            <converters:ObjectTypeToBooleanConverter x:Key="OConv" />
            <Style x:Key="TreeViewItemFocusVisual">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Rectangle />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z" />

            <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="Focusable" Value="False" />
                <Setter Property="Width" Value="16" />
                <Setter Property="Height" Value="16" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border Width="16" Height="16" Background="Transparent" Padding="5,5,5,5">
                                <Path x:Name="ExpandPath" Fill="Transparent" Stroke="#FF989898"
                                      Data="{StaticResource TreeArrow}">
                                    <Path.RenderTransform>
                                        <RotateTransform Angle="135" CenterX="3" CenterY="3" />
                                    </Path.RenderTransform>
                                </Path>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Stroke" TargetName="ExpandPath" Value="Black" />
                                    <Setter Property="Fill" TargetName="ExpandPath" Value="Transparent" />
                                </Trigger>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter Property="RenderTransform" TargetName="ExpandPath">
                                        <Setter.Value>
                                            <RotateTransform Angle="180" CenterX="3" CenterY="3" />
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="Fill" TargetName="ExpandPath" Value="#FF595959" />
                                    <Setter Property="Stroke" TargetName="ExpandPath" Value="#FF262626" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>


            <Style x:Key="TreeViewItemStyle1" TargetType="{x:Type TreeViewItem}">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="HorizontalContentAlignment"
                        Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
                <Setter Property="VerticalContentAlignment"
                        Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
                <Setter Property="Padding" Value="0,0,0,0" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TreeViewItem}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MinWidth="19" Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition />
                                </Grid.RowDefinitions>
                                <!-- created ItemRowGrid to contain both togglebutton and border -->
                                <Grid x:Name="ItemRowGrid" Grid.ColumnSpan="3" Margin="1.5,0,0,0">
                                    <ToggleButton x:Name="Expander" ClickMode="Press"
                                                  IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                                  Style="{StaticResource ExpandCollapseToggleStyle}"
                                                  HorizontalAlignment="Left"
                                                  d:LayoutOverrides="Width, LeftMargin, RightMargin" />
                                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            Background="{TemplateBinding Background}" Grid.Column="0"
                                            Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true"
                                            Margin="17.5,0,-17.5,0">
                                        <ContentPresenter x:Name="PART_Header" ContentSource="Header"
                                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </Border>
                                </Grid>
                                <ItemsPresenter x:Name="ItemsHost" Grid.ColumnSpan="2" Grid.Column="1" Grid.Row="1" />
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsExpanded" Value="false">
                                    <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed" />
                                </Trigger>
                                <Trigger Property="HasItems" Value="false">
                                    <Setter Property="Visibility" TargetName="Expander" Value="Hidden" />
                                </Trigger>
                                <Trigger Property="IsSelected" Value="true">
                                    <Setter Property="Foreground"
                                            Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                                    <!-- setting highlight target to created ItemRowGrid instead of border -->
                                    <Setter Property="Background" TargetName="ItemRowGrid"
                                            Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground"
                                            Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Grid.Resources>


        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>

        <Grid x:Name="leftHelperGrid" Background="Aqua" Grid.Column="0" Grid.Row="0" VerticalAlignment="Stretch"
              HorizontalAlignment="Stretch">
            <Button x:Name="leftButtonGrid" Grid.Column="0" Grid.Row="0" VerticalAlignment="Stretch"
                    HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch" />
        </Grid>

        <Expander Grid.Column="0" Grid.Row="0" Margin="0,0" HorizontalAlignment="Left"
                  Width="{Binding ElementName=leftHelperGrid, Path=ActualWidth, Mode=OneWay}" Name="expanderLeft"
                  Background="LightGray" Expanded="ExpanderLeft_OnExpanded" Collapsed="ExpanderLeft_OnCollapsed"
                  IsExpanded="True" BorderBrush="DimGray" BorderThickness="0,1,1,1" ExpandDirection="Right">

            <b:Interaction.Behaviors>
                <classes:GridColumnWidthReseterBehaviour TargetGridColumnIndex="0" />
            </b:Interaction.Behaviors>

            <Grid Margin="1">

                <Grid.RowDefinitions>
                    <RowDefinition Height="*" />
                    <RowDefinition Height="50" />
                </Grid.RowDefinitions>

                <TreeView x:Name="trOptimizerTests" Grid.Column="0" ItemsSource="{Binding Tests}"
                          BorderThickness="1,0,0,0" BorderBrush="DarkGray"
                          SelectedItemChanged="trOptimizerTests_OnSelectedItemChanged">

                    <TreeView.Resources>
                        <HierarchicalDataTemplate DataType="{x:Type optimizer:OptimizerTestViewModel }"
                                                  ItemsSource="{Binding Periods}">
                            <TextBlock VerticalAlignment="Center" FontSize="16" HorizontalAlignment="Stretch"
                                       Foreground="Black" Width="250" Margin="0,2"
                                       Text="{Binding Path=Name}">
                                <TextBlock.InputBindings>
                                    <MouseBinding Gesture="LeftDoubleClick"
                                                  Command="{Binding Path=DataContext.EditCommand, RelativeSource={RelativeSource AncestorType={x:Type TreeView}}}" />
                                </TextBlock.InputBindings>
                            </TextBlock>

                        </HierarchicalDataTemplate>
                        <HierarchicalDataTemplate DataType="{x:Type optimizer:OptimizerPeriodViewModel }">
                            <TextBlock VerticalAlignment="Center" FontSize="16" HorizontalAlignment="Stretch"
                                       Foreground="Black" Width="250" Margin="0,2"
                                       Text="{Binding Path=DisplayName}" TextWrapping="Wrap">
                                <TextBlock.InputBindings>
                                    <MouseBinding Gesture="LeftDoubleClick"
                                                  Command="{Binding Path=DataContext.EditCommand, RelativeSource={RelativeSource AncestorType={x:Type TreeView}}}" />
                                </TextBlock.InputBindings>
                            </TextBlock>
                        </HierarchicalDataTemplate>
                    </TreeView.Resources>

                    <TreeView.ContextMenu>
                        <ContextMenu>
                            <MenuItem Header="Create test" Command="{Binding AddOptimizerTestCommand}"
                                      IsEnabled="{Binding Path=CanAddTest}" />
                            <MenuItem Header="Add period" Command="{Binding AddOptimizerPeriodCommand}"
                                      IsEnabled="{Binding IsAddPeriodEnable}" />
                            <MenuItem Header="Edit" Command="{Binding EditCommand}" IsEnabled="{Binding IsEditEnable}" />
                            <MenuItem Header="Remove" Command="{Binding RemoveCommand}"
                                      IsEnabled="{Binding IsRemoveEnable}" />
                            <MenuItem Header="Period constructor" Command="{Binding EditPeriodsCommand}"
                                      IsEnabled="{Binding IsEditEnable}" />
                            <Separator />
                            <MenuItem Header="Run" Command="{Binding RunCommand}" IsEnabled="{Binding IsRunEnable}" />
                            <MenuItem Header="Save results" Command="{Binding SaveOptimizerResultsCommand}"
                                      IsEnabled="{Binding IsRunEnable}" />
                            <MenuItem Header="Export as PDF" Command="{Binding ExportPDFCommand}"
                                      CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=Window}}">
                                <MenuItem.Style>
                                    <Style>
                                        <Setter Property="MenuItem.Visibility" Value="Collapsed" />
                                        <Style.Triggers>
                                            <DataTrigger
                                                Binding="{Binding SelectedOptimizerItem, Converter={StaticResource OConv}, ConverterParameter=Twm.ViewModels.Strategies.Optimizer.OptimizerTestViewModel}"
                                                Value="True">
                                                <Setter Property="MenuItem.Visibility" Value="Visible" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>

                                </MenuItem.Style>

                            </MenuItem>

                            <Separator />
                            <MenuItem Header="Presets">
                                <MenuItem Header="Load" Command="{Binding OptimizerTestPresetsLoadCommand}" />
                                <MenuItem Header="Save" Command="{Binding OptimizerTestPresetsSaveCommand}"
                                          IsEnabled="{Binding IsPresetSaveEnable}" />
                                <MenuItem Header="Export" Command="{Binding OptimizerTestPresetsExportCommand}" />
                            </MenuItem>
                        </ContextMenu>
                    </TreeView.ContextMenu>

                    <TreeView.ItemContainerStyle>
                        <Style TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource TreeViewItemStyle1}">
                            <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
                            <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
                            <Setter Property="FontWeight" Value="Normal" />
                            <Style.Resources>
                                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="LightGray" />
                            </Style.Resources>
                            <Style.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="FontWeight" Value="Normal" />
                                    <Setter Property="Foreground" Value="Black" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </TreeView.ItemContainerStyle>
                </TreeView>

                <Grid Grid.Row="1">
                    <Border Background="#FFDFDFDF" BorderThickness="1,0,0,0" BorderBrush="DarkGray"
                            Visibility="{Binding RunVisibility}">
                        <Button Margin="10,0" Content="Run" Width="100" Height="30"
                                Visibility="{Binding OptimizerTestVisibility}"
                                HorizontalAlignment="Right" Command="{Binding RunCommand}"
                                IsEnabled="{Binding CanRun}" />
                    </Border>

                    <Border Background="#FFDFDFDF" BorderThickness="1,0,0,0" BorderBrush="DarkGray"
                            Visibility="{Binding StopVisibility}">
                        <Button Margin="10,0" Content="Stop" Width="100" Height="30"
                                Visibility="{Binding OptimizerTestVisibility}"
                                HorizontalAlignment="Right" Command="{Binding StopCommand}"
                                IsEnabled="{Binding IsStopEnable}" />
                    </Border>

                    <Label Margin="2" Background="#FFDFDFDF" Content="{Binding TotalTimeStr}" HorizontalAlignment="Left" Width="100" VerticalAlignment="Center"  HorizontalContentAlignment="Center"/>
                </Grid>
            </Grid>
        </Expander>

        <GridSplitter Grid.Column="1"
                      Width="5"
                      ResizeBehavior="PreviousAndNext"
                      Name="leftSplitter"
                      ResizeDirection="Columns"
                      VerticalAlignment="Stretch"
                      Height="Auto" />

        <ContentControl Content="{Binding SelectedOptimizerItem}" Grid.Column="2" Name="contentControl">
            <ContentControl.Resources>
                <DataTemplate DataType="{x:Type optimizer:OptimizerTestViewModel}">

                    <optimizerViews:OptimizerTestView DataContext="{Binding}">

                        <UserControl.Style>
                            <Style TargetType="UserControl">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding}" Value="{x:Null}">
                                        <Setter Property="Visibility" Value="Collapsed" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </UserControl.Style>

                    </optimizerViews:OptimizerTestView>
                </DataTemplate>
                <DataTemplate DataType="{x:Type optimizer:OptimizerPeriodViewModel}">

                    <optimizerViews:OptimizerPeriodView DataContext="{Binding}">

                        <UserControl.Style>
                            <Style TargetType="UserControl">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding}" Value="{x:Null}">
                                        <Setter Property="Visibility" Value="Collapsed" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </UserControl.Style>

                    </optimizerViews:OptimizerPeriodView>
                </DataTemplate>
            </ContentControl.Resources>
        </ContentControl>

        <GridSplitter Grid.Column="3"
                      Width="5"
                      ResizeBehavior="PreviousAndNext"
                      Name="rightSplitter"
                      ResizeDirection="Auto"
                      VerticalAlignment="Stretch"
                      Height="Auto" />

        <Grid x:Name="rightHelperGrid" Background="Aqua" Grid.Column="4" Grid.Row="0" VerticalAlignment="Stretch"
              HorizontalAlignment="Stretch">
            <Button x:Name="rightButtonGrid" Grid.Column="0" Grid.Row="0" VerticalAlignment="Stretch"
                    HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch" />
        </Grid>


        <Expander Margin="0,0" HorizontalAlignment="Right" Name="expanderRight"
                  Width="{Binding ElementName=rightHelperGrid, Path=ActualWidth, Mode=OneWay}"
                  Grid.Column="4" Background="LightGray" Expanded="ExpanderRight_OnExpanded"
                  Collapsed="ExpanderRight_OnCollapsed"
                  IsExpanded="True" BorderBrush="DimGray" BorderThickness="1,1,0,1" ExpandDirection="Left">
            <b:Interaction.Behaviors>
                <classes:GridColumnWidthReseterBehaviour TargetGridColumnIndex="4" />
            </b:Interaction.Behaviors>
            <Grid Margin="1" IsEnabled="{Binding IsStrategySelectEnable}">

                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="1*" />
                    <ColumnDefinition Width="3*" />
                    <ColumnDefinition Width="10" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="30" />
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>


                <Border Grid.Column="0" Grid.ColumnSpan="3" Background="White" BorderThickness="0,0,1,0"
                        BorderBrush="DarkGray" />
                <Label Grid.Row="0" Grid.Column="0" Content="Strategy:" VerticalContentAlignment="Center" />

                <Border Grid.Row="0" Grid.Column="1" BorderThickness="1" BorderBrush="LightGray" Height="25"
                        Margin="0,2,0,0">
                    <Label
                        Content="{Binding Path=StrategyName, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                        Height="25"
                        VerticalAlignment="Center"
                        ContextMenuService.IsEnabled="false"

                        ToolTipService.InitialShowDelay="1000"
                        ContextMenuService.Placement="Bottom" />

                </Border>

                <Button Grid.Row="0" Grid.Column="1" Height="25" Width="25" HorizontalAlignment="Right" Content="..."
                        IsEnabled="{Binding IsStrategyEnable}"
                        Command="{Binding SelectStrategyCommand}" />


                <xctk:PropertyGrid x:Name="propertyGrid" Grid.Column="0" Grid.ColumnSpan="3" Grid.Row="1"
                                   FontSize="14" IsCategorized="True" IsEnabled="{Binding IsStrategyEnable}"
                                   ShowSearchBox="False" ShowTitle="False" ShowSortOptions="False"
                                   ShowDescriptionByTooltip="True"
                                   ShowAdvancedOptions="False"
                                   AutoGenerateProperties="True"
                                   extensions:PropertyGridExt.PropsVisibility="Optimizer"
                                   SelectedObject="{Binding Strategy}">

                    <xctk:PropertyGrid.AdvancedOptionsMenu>
                        <ContextMenu>
                            <MenuItem Header="Presets">
                                <MenuItem Header="Load" Click="LoadOnClick" />
                                <MenuItem Header="Save" Click="SaveOnClick" />
                                <MenuItem Header="Export" Click="ExportOnClick" />
                            </MenuItem>
                        </ContextMenu>
                    </xctk:PropertyGrid.AdvancedOptionsMenu>

                    <xctk:PropertyGrid.ContextMenu>
                        <ContextMenu>
                            <MenuItem Header="Presets">
                                <MenuItem Header="Load" Command="{Binding OptimizerStrategyPresetLoadCommand}" />
                                <MenuItem Header="Save" Command="{Binding OptimizerStrategyPresetSaveCommand}"
                                          IsEnabled="{Binding IsStrategyPresetSaveEnable}" />
                                <MenuItem Header="Export" Command="{Binding OptimizerStrategyPresetExportCommand}" />
                            </MenuItem>
                        </ContextMenu>
                    </xctk:PropertyGrid.ContextMenu>


                    <b:Interaction.Behaviors>
                        <extensions:PropsVisibilityBehavior />
                    </b:Interaction.Behaviors>
                    <xctk:PropertyGrid.EditorDefinitions>
                        <xctk:EditorTemplateDefinition TargetProperties="OptimizerTypes">
                            <xctk:EditorTemplateDefinition.EditingTemplate>
                                <DataTemplate>
                                    <ComboBox ItemsSource="{Binding Instance.OptimizerTypes}"
                                              SelectedValue="{Binding Instance.OptimizerType}" />
                                </DataTemplate>
                            </xctk:EditorTemplateDefinition.EditingTemplate>
                        </xctk:EditorTemplateDefinition>

                        <xctk:EditorTemplateDefinition TargetProperties="OptimizationFitnessTypes">
                            <xctk:EditorTemplateDefinition.EditingTemplate>
                                <DataTemplate>
                                    <ComboBox ItemsSource="{Binding Instance.OptimizationFitnessTypes}"
                                              SelectedValue="{Binding Instance.OptimizationFitnessType}" />
                                </DataTemplate>
                            </xctk:EditorTemplateDefinition.EditingTemplate>
                        </xctk:EditorTemplateDefinition>

                        <xctk:EditorTemplateDefinition TargetProperties="MoneyManagementTypes">
                            <xctk:EditorTemplateDefinition.EditingTemplate>
                                <DataTemplate>
                                    <ComboBox ItemsSource="{Binding Instance.MoneyManagementTypes}"
                                              SelectedValue="{Binding Instance.MoneyManagementType}" />
                                </DataTemplate>
                            </xctk:EditorTemplateDefinition.EditingTemplate>
                        </xctk:EditorTemplateDefinition>

                        <xctk:EditorTemplateDefinition TargetProperties="CommissionTypes">
                            <xctk:EditorTemplateDefinition.EditingTemplate>
                                <DataTemplate>
                                    <ComboBox ItemsSource="{Binding Instance.CommissionTypes}"
                                              SelectedValue="{Binding Instance.CommissionType}" />
                                </DataTemplate>
                            </xctk:EditorTemplateDefinition.EditingTemplate>
                        </xctk:EditorTemplateDefinition>
                    </xctk:PropertyGrid.EditorDefinitions>


                </xctk:PropertyGrid>


            </Grid>
        </Expander>

        <controls:LoadingPanel x:Name="loadingPanel" Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="5"
                               IsLoading="{Binding IsBusy, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                               Message="{Binding Message}"
                               SubMessage="{Binding SubMessage}" />
    </Grid>
</Window>