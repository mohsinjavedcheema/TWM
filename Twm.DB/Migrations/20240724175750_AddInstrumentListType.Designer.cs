// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Twm.DB.DAL;

namespace Twm.DB.Migrations
{
    [DbContext(typeof(TwmContext))]
    [Migration("20240724175750_AddInstrumentListType")]
    partial class AddInstrumentListType
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024");

            modelBuilder.Entity("Twm.Model.Model.Connection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DataProviderId");

                    b.Property<bool>("IsSystem");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("DataProviderId");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("Twm.Model.Model.ConnectionOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConnectionId");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ConnectionId");

                    b.ToTable("ConnectionOptions");
                });

            modelBuilder.Entity("Twm.Model.Model.DataProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("DataProviders");

                    b.HasData(
                        new { Id = 3, Code = "Bybit", Name = "Bybit" },
                        new { Id = 4, Code = "Binance", Name = "Binance" }
                    );
                });

            modelBuilder.Entity("Twm.Model.Model.HistoricalMetaData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DataProviderId");

                    b.Property<string>("DataSeriesType");

                    b.Property<int>("DataSeriesValue");

                    b.Property<string>("DataType");

                    b.Property<string>("InstrumentType");

                    b.Property<bool>("IsTest");

                    b.Property<DateTime>("PeriodEnd");

                    b.Property<DateTime>("PeriodStart");

                    b.Property<string>("Symbol");

                    b.HasKey("Id");

                    b.HasIndex("DataProviderId");

                    b.ToTable("HistoricalMetaDatas");
                });

            modelBuilder.Entity("Twm.Model.Model.Instrument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Base");

                    b.Property<int>("ConnectionId");

                    b.Property<string>("Description");

                    b.Property<string>("DpId");

                    b.Property<double?>("MinLotSize");

                    b.Property<double?>("Multiplier");

                    b.Property<double?>("Notional");

                    b.Property<string>("PriceIncrements");

                    b.Property<string>("ProviderData");

                    b.Property<string>("Quote");

                    b.Property<string>("Symbol");

                    b.Property<string>("TradingHours");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ConnectionId");

                    b.ToTable("Instruments");
                });

            modelBuilder.Entity("Twm.Model.Model.InstrumentInstrumentList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("InstrumentId");

                    b.Property<int>("InstrumentListId");

                    b.HasKey("Id");

                    b.HasIndex("InstrumentId");

                    b.HasIndex("InstrumentListId");

                    b.ToTable("InstrumentInstrumentLists");
                });

            modelBuilder.Entity("Twm.Model.Model.InstrumentList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConnectionId");

                    b.Property<bool>("IsDefault");

                    b.Property<string>("Name");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ConnectionId");

                    b.ToTable("InstrumentLists");
                });

            modelBuilder.Entity("Twm.Model.Model.InstrumentMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FirstInstrumentId");

                    b.Property<int>("SecondInstrumentId");

                    b.HasKey("Id");

                    b.HasIndex("FirstInstrumentId");

                    b.HasIndex("SecondInstrumentId");

                    b.ToTable("InstrumentMaps");
                });

            modelBuilder.Entity("Twm.Model.Model.OptimizerResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DataSeriesType");

                    b.Property<int>("DataSeriesValue");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Guid");

                    b.Property<string>("Name");

                    b.Property<string>("StrategyGuid");

                    b.Property<string>("StrategyVersion");

                    b.Property<string>("Symbol");

                    b.HasKey("Id");

                    b.ToTable("OptimizerResults");
                });

            modelBuilder.Entity("Twm.Model.Model.Preset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Data");

                    b.Property<string>("Guid");

                    b.Property<string>("Name");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Presets");
                });

            modelBuilder.Entity("Twm.Model.Model.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Data");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Twm.Model.Model.SystemOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<string>("Code");

                    b.Property<string>("Group");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.Property<bool>("ValueBool");

                    b.Property<DateTime>("ValueDate");

                    b.Property<double>("ValueDouble");

                    b.Property<int>("ValueInt");

                    b.Property<string>("ValueType");

                    b.HasKey("Id");

                    b.ToTable("SystemOptions");

                    b.HasData(
                        new { Id = 1, Category = "General", Code = "CstPrjPath", Group = "Project", Name = "Custom project path", ValueBool = false, ValueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ValueDouble = 0.0, ValueInt = 0 },
                        new { Id = 2, Category = "General", Code = "CstPrjDllPath", Group = "Project", Name = "Custom project dll path", ValueBool = false, ValueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ValueDouble = 0.0, ValueInt = 0 },
                        new { Id = 3, Category = "General", Code = "CompileDebug", Group = "Project", Name = "Compile in debug", ValueBool = false, ValueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ValueDouble = 0.0, ValueInt = 0, ValueType = "bool" },
                        new { Id = 4, Category = "General", Code = "TradeBuyColor", Group = "Display", Name = "Trade buy color", Value = "Blue", ValueBool = false, ValueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ValueDouble = 0.0, ValueInt = 0 },
                        new { Id = 5, Category = "General", Code = "TradeSellColor", Group = "Display", Name = "Trade sell color", Value = "Magenta", ValueBool = false, ValueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ValueDouble = 0.0, ValueInt = 0 },
                        new { Id = 6, Category = "General", Code = "DownBarColor", Group = "Display", Name = "Color for down bars", Value = "Red", ValueBool = false, ValueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ValueDouble = 0.0, ValueInt = 0 },
                        new { Id = 7, Category = "General", Code = "UpBarColor", Group = "Display", Name = "Color for up bars", Value = "LimeGreen", ValueBool = false, ValueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ValueDouble = 0.0, ValueInt = 0 },
                        new { Id = 8, Category = "General", Code = "CandleOutlineColor", Group = "Display", Name = "Candle body outline color", Value = "Black", ValueBool = false, ValueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ValueDouble = 0.0, ValueInt = 0 },
                        new { Id = 9, Category = "General", Code = "CandleWickColor", Group = "Display", Name = "Candle wick color", Value = "Black", ValueBool = false, ValueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ValueDouble = 0.0, ValueInt = 0 },
                        new { Id = 10, Category = "General", Code = "ChartBackgroundColor", Group = "Display", Name = "Chart background color", Value = "White", ValueBool = false, ValueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ValueDouble = 0.0, ValueInt = 0 },
                        new { Id = 11, Category = "General", Code = "ChartVGridColor", Group = "Display", Name = "Chart vertical grid color", Value = "LightGray", ValueBool = false, ValueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ValueDouble = 0.0, ValueInt = 0 },
                        new { Id = 12, Category = "General", Code = "ChartHGridColor", Group = "Display", Name = "Chart horizontal grid color", Value = "LightGray", ValueBool = false, ValueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ValueDouble = 0.0, ValueInt = 0 },
                        new { Id = 13, Category = "General", Code = "TextColor", Group = "Display", Name = "Chart axis text color", Value = "Black", ValueBool = false, ValueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ValueDouble = 0.0, ValueInt = 0 },
                        new { Id = 14, Category = "General", Code = "IndicatorSeparatorColor", Group = "Display", Name = "Indicator separator color", Value = "LightGray", ValueBool = false, ValueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ValueDouble = 0.0, ValueInt = 0 },
                        new { Id = 15, Category = "General", Code = "IndicatorSeparatorWidth", Group = "Display", Name = "Indicator separator width", Value = "1", ValueBool = false, ValueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ValueDouble = 0.0, ValueInt = 0 },
                        new { Id = 16, Category = "General", Code = "PlotExecutions", Group = "Display", Name = "Plot executions", Value = "1", ValueBool = false, ValueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ValueDouble = 0.0, ValueInt = 0 },
                        new { Id = 17, Category = "General", Code = "MarkerTextColor", Group = "Display", Name = "Marker text color", Value = "Black", ValueBool = false, ValueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ValueDouble = 0.0, ValueInt = 0 },
                        new { Id = 18, Category = "General", Code = "TimeZone", Group = "Preferences", Name = "Time zone", Value = "", ValueBool = false, ValueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ValueDouble = 0.0, ValueInt = 0 },
                        new { Id = 20, Category = "Calculation", Code = "CalculateSimulation", Group = "Optimizer", Name = "Calculate simulation", ValueBool = false, ValueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ValueDouble = 0.0, ValueInt = 0, ValueType = "bool" },
                        new { Id = 21, Category = "General", Code = "EmailHost", Group = "Email", Name = "Email host", ValueBool = false, ValueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ValueDouble = 0.0, ValueInt = 0 },
                        new { Id = 22, Category = "General", Code = "EmailPort", Group = "Email", Name = "Email port", ValueBool = false, ValueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ValueDouble = 0.0, ValueInt = 0, ValueType = "int" },
                        new { Id = 23, Category = "General", Code = "EmailUsername", Group = "Email", Name = "Email username", ValueBool = false, ValueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ValueDouble = 0.0, ValueInt = 0 },
                        new { Id = 24, Category = "General", Code = "EmailPassword", Group = "Email", Name = "Email password", ValueBool = false, ValueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ValueDouble = 0.0, ValueInt = 0 },
                        new { Id = 25, Category = "General", Code = "LogInFile", Group = "Preferences", Name = "Log in file", ValueBool = true, ValueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ValueDouble = 0.0, ValueInt = 0, ValueType = "bool" },
                        new { Id = 29, Category = "General", Code = "ReloadOnRecompile", Group = "Project", Name = "Reload script on recompile", ValueBool = true, ValueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ValueDouble = 0.0, ValueInt = 0, ValueType = "bool" }
                    );
                });

            modelBuilder.Entity("Twm.Model.Model.ViewOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Data");

                    b.HasKey("Id");

                    b.ToTable("ViewOptions");
                });

            modelBuilder.Entity("Twm.Model.Model.Connection", b =>
                {
                    b.HasOne("Twm.Model.Model.DataProvider", "DataProvider")
                        .WithMany("Connections")
                        .HasForeignKey("DataProviderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Twm.Model.Model.ConnectionOption", b =>
                {
                    b.HasOne("Twm.Model.Model.Connection", "Connection")
                        .WithMany("Options")
                        .HasForeignKey("ConnectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Twm.Model.Model.HistoricalMetaData", b =>
                {
                    b.HasOne("Twm.Model.Model.DataProvider", "DataProvider")
                        .WithMany()
                        .HasForeignKey("DataProviderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Twm.Model.Model.Instrument", b =>
                {
                    b.HasOne("Twm.Model.Model.Connection")
                        .WithMany("Instruments")
                        .HasForeignKey("ConnectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Twm.Model.Model.InstrumentInstrumentList", b =>
                {
                    b.HasOne("Twm.Model.Model.Instrument", "Instrument")
                        .WithMany("InstrumentInstrumentLists")
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Twm.Model.Model.InstrumentList", "InstrumentList")
                        .WithMany("InstrumentInstrumentLists")
                        .HasForeignKey("InstrumentListId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Twm.Model.Model.InstrumentList", b =>
                {
                    b.HasOne("Twm.Model.Model.Connection", "Connection")
                        .WithMany()
                        .HasForeignKey("ConnectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Twm.Model.Model.InstrumentMap", b =>
                {
                    b.HasOne("Twm.Model.Model.Instrument", "FirstInstrument")
                        .WithMany()
                        .HasForeignKey("FirstInstrumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Twm.Model.Model.Instrument", "SecondInstrument")
                        .WithMany()
                        .HasForeignKey("SecondInstrumentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
